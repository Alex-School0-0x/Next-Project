// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250130102717_AddApplicationLogsTable")]
    partial class AddApplicationLogsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("QuestionnaireTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StudentCompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TeacherCompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireTemplateId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("Title");

                    b.ToTable("ActiveQuestionnaire", (string)null);
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireOptionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveQuestionnaireQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OptionValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveQuestionnaireQuestionId");

                    b.ToTable("ActiveQuestionnaireOption", (string)null);
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveQuestionnaireId");

                    b.ToTable("ActiveQuestionnaireQuestion", (string)null);
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireResponseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveQuestionnaireQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("CustomStudentResponseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomTeacherResponseId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("StudentResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherResponse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveQuestionnaireId");

                    b.HasIndex("ActiveQuestionnaireQuestionId");

                    b.HasIndex("CustomStudentResponseId")
                        .IsUnique();

                    b.HasIndex("CustomTeacherResponseId")
                        .IsUnique();

                    b.ToTable("ActiveQuestionnaireResponse", (string)null);
                });

            modelBuilder.Entity("Database.Models.ApplicationLogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs", (string)null);
                });

            modelBuilder.Entity("Database.Models.CustomAnswerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveQuestionnaireResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveQuestionnaireResponseId")
                        .IsUnique();

                    b.ToTable("CustomAnswer", (string)null);
                });

            modelBuilder.Entity("Database.Models.QuestionnaireOptionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OptionValue")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionnaireTemplateOption", (string)null);
                });

            modelBuilder.Entity("Database.Models.QuestionnaireQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCustom")
                        .HasColumnType("bit");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("QuestionnaireTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireTemplateId");

                    b.ToTable("QuestionnaireTemplateQuestion", (string)null);
                });

            modelBuilder.Entity("Database.Models.QuestionnaireTemplateModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpated")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateTitle")
                        .IsUnique();

                    b.ToTable("QuestionnaireTemplate", (string)null);
                });

            modelBuilder.Entity("Database.Models.RevokedRefreshTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RevokedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("Token")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.ToTable("RevokedRefreshToken", (string)null);
                });

            modelBuilder.Entity("Database.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireModel", b =>
                {
                    b.HasOne("Database.Models.UserModel", null)
                        .WithMany("ActiveQuestionnaires")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.QuestionnaireTemplateModel", "QuestionnaireTemplate")
                        .WithMany("ActiveQuestionnaires")
                        .HasForeignKey("QuestionnaireTemplateId");

                    b.HasOne("Database.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.UserModel", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuestionnaireTemplate");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireOptionModel", b =>
                {
                    b.HasOne("Database.Models.ActiveQuestionnaireQuestionModel", "ActiveQuestionnaireQuestion")
                        .WithMany("ActiveQuestionnaireOptions")
                        .HasForeignKey("ActiveQuestionnaireQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveQuestionnaireQuestion");
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireQuestionModel", b =>
                {
                    b.HasOne("Database.Models.ActiveQuestionnaireModel", "ActiveQuestionnaire")
                        .WithMany("ActiveQuestionnaireQuestions")
                        .HasForeignKey("ActiveQuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveQuestionnaire");
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireResponseModel", b =>
                {
                    b.HasOne("Database.Models.ActiveQuestionnaireModel", "ActiveQuestionnaire")
                        .WithMany("Answers")
                        .HasForeignKey("ActiveQuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.ActiveQuestionnaireQuestionModel", "ActiveQuestionnaireQuestion")
                        .WithMany()
                        .HasForeignKey("ActiveQuestionnaireQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.CustomAnswerModel", "CustomStudentResponse")
                        .WithOne()
                        .HasForeignKey("Database.Models.ActiveQuestionnaireResponseModel", "CustomStudentResponseId");

                    b.HasOne("Database.Models.CustomAnswerModel", "CustomTeacherResponse")
                        .WithOne()
                        .HasForeignKey("Database.Models.ActiveQuestionnaireResponseModel", "CustomTeacherResponseId");

                    b.Navigation("ActiveQuestionnaire");

                    b.Navigation("ActiveQuestionnaireQuestion");

                    b.Navigation("CustomStudentResponse");

                    b.Navigation("CustomTeacherResponse");
                });

            modelBuilder.Entity("Database.Models.CustomAnswerModel", b =>
                {
                    b.HasOne("Database.Models.ActiveQuestionnaireResponseModel", "ActiveQuestionnaireResponse")
                        .WithOne()
                        .HasForeignKey("Database.Models.CustomAnswerModel", "ActiveQuestionnaireResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveQuestionnaireResponse");
                });

            modelBuilder.Entity("Database.Models.QuestionnaireOptionModel", b =>
                {
                    b.HasOne("Database.Models.QuestionnaireQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Database.Models.QuestionnaireQuestionModel", b =>
                {
                    b.HasOne("Database.Models.QuestionnaireTemplateModel", "QuestionnaireTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionnaireTemplate");
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireModel", b =>
                {
                    b.Navigation("ActiveQuestionnaireQuestions");

                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Database.Models.ActiveQuestionnaireQuestionModel", b =>
                {
                    b.Navigation("ActiveQuestionnaireOptions");
                });

            modelBuilder.Entity("Database.Models.QuestionnaireQuestionModel", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Database.Models.QuestionnaireTemplateModel", b =>
                {
                    b.Navigation("ActiveQuestionnaires");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Database.Models.UserModel", b =>
                {
                    b.Navigation("ActiveQuestionnaires");
                });
#pragma warning restore 612, 618
        }
    }
}
